<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\VE21_CAN.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\VE21_CAN.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Feb 29 09:20:17 2024
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; TickTime5MsTask &rArr; AppCanTask5ms &rArr; Dcm_MainFunction &rArr; DslInternal_Timer_CallbackTask &rArr; App_DefaultPost &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[bb]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">PendSV_Handler</a><BR>
 <LI><a href="#[f]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SysTick_Handler</a><BR>
 <LI><a href="#[15]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[22]">AES_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2b]">ATIM_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[39]">AddVoltage</a> from drv_system_voltage.o(i.AddVoltage) referenced from drv_system_voltage.o(.constdata)
 <LI><a href="#[65]">AppIpduBCM_1F0_Ind</a> from app_com.o(i.AppIpduBCM_1F0_Ind) referenced from com_cfg.o(.constdata)
 <LI><a href="#[61]">AppIpduCSM_3CA_Conf</a> from app_com.o(i.AppIpduCSM_3CA_Conf) referenced from com_cfg.o(.constdata)
 <LI><a href="#[60]">AppIpduCSM_3CA_TxTOIndication</a> from app_com.o(i.AppIpduCSM_3CA_TxTOIndication) referenced from com_cfg.o(.constdata)
 <LI><a href="#[63]">AppIpduEHB_125_Ind</a> from app_com.o(i.AppIpduEHB_125_Ind) referenced from com_cfg.o(.constdata)
 <LI><a href="#[64]">AppIpduPMS_162_Ind</a> from app_com.o(i.AppIpduPMS_162_Ind) referenced from com_cfg.o(.constdata)
 <LI><a href="#[66]">AppIpduPMS_214_Ind</a> from app_com.o(i.AppIpduPMS_214_Ind) referenced from com_cfg.o(.constdata)
 <LI><a href="#[67]">AppIpduPMS_3C1_Ind</a> from app_com.o(i.AppIpduPMS_3C1_Ind) referenced from com_cfg.o(.constdata)
 <LI><a href="#[62]">AppIpduPSM_A0_Ind</a> from app_com.o(i.AppIpduPSM_A0_Ind) referenced from com_cfg.o(.constdata)
 <LI><a href="#[6b]">AppRxIpduBCM_1F0_TimeOutInd</a> from app_com.o(i.AppRxIpduBCM_1F0_TimeOutInd) referenced from com_cfg.o(.constdata)
 <LI><a href="#[69]">AppRxIpduEHB_125_TimeOutInd</a> from app_com.o(i.AppRxIpduEHB_125_TimeOutInd) referenced from com_cfg.o(.constdata)
 <LI><a href="#[6a]">AppRxIpduPMS_162_TimeOutInd</a> from app_com.o(i.AppRxIpduPMS_162_TimeOutInd) referenced from com_cfg.o(.constdata)
 <LI><a href="#[6c]">AppRxIpduPMS_214_TimeOutInd</a> from app_com.o(i.AppRxIpduPMS_214_TimeOutInd) referenced from com_cfg.o(.constdata)
 <LI><a href="#[6d]">AppRxIpduPMS_3C1_TimeOutInd</a> from app_com.o(i.AppRxIpduPMS_3C1_TimeOutInd) referenced from com_cfg.o(.constdata)
 <LI><a href="#[68]">AppRxIpduPSM_A0_TimeOutInd</a> from app_com.o(i.AppRxIpduPSM_A0_TimeOutInd) referenced from com_cfg.o(.constdata)
 <LI><a href="#[a6]">App_DTCRecordOff</a> from app_dcm.o(i.App_DTCRecordOff) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[a5]">App_DTCRecordOn</a> from app_dcm.o(i.App_DTCRecordOn) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[90]">App_Default</a> from app_dcm.o(i.App_Default) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[91]">App_DefaultPost</a> from app_dcm.o(i.App_DefaultPost) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[a4]">App_DisableRxAndEnableTx</a> from app_dcm.o(i.App_DisableRxAndEnableTx) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[a2]">App_DisableRxAndTx</a> from app_dcm.o(i.App_DisableRxAndTx) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[a3]">App_EnableRxAndDisableTx</a> from app_dcm.o(i.App_EnableRxAndDisableTx) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[a1]">App_EnableRxAndTx</a> from app_dcm.o(i.App_EnableRxAndTx) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[94]">App_Extended_Diagnostic</a> from app_dcm.o(i.App_Extended_Diagnostic) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[95]">App_Extended_DiagnosticPost</a> from app_dcm.o(i.App_Extended_DiagnosticPost) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[98]">App_HardReset</a> from app_dcm.o(i.App_HardReset) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[99]">App_HardResetPost</a> from app_dcm.o(i.App_HardResetPost) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[96]">App_Kuwe_Session</a> from app_dcm.o(i.App_Kuwe_Session) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[97]">App_Kuwe_SessionPost</a> from app_dcm.o(i.App_Kuwe_SessionPost) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[92]">App_Programming</a> from app_dcm.o(i.App_Programming) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[93]">App_ProgrammingPost</a> from app_dcm.o(i.App_ProgrammingPost) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[73]">App_Read0x1540</a> from app_dcm.o(i.App_Read0x1540) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[74]">App_Read0x1541</a> from app_dcm.o(i.App_Read0x1541) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[76]">App_Read0xF183</a> from app_dcm.o(i.App_Read0xF183) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[77]">App_Read0xF184</a> from app_dcm.o(i.App_Read0xF184) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[6e]">App_Read0xF187</a> from app_dcm.o(i.App_Read0xF187) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[6f]">App_Read0xF18A</a> from app_dcm.o(i.App_Read0xF18A) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[72]">App_Read0xF18E</a> from app_dcm.o(i.App_Read0xF18E) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[75]">App_Read0xF190</a> from app_dcm.o(i.App_Read0xF190) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[70]">App_Read0xF191</a> from app_dcm.o(i.App_Read0xF191) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[71]">App_Read0xF195</a> from app_dcm.o(i.App_Read0xF195) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[9b]">App_ReportDTCByStatusMask</a> from app_dcm.o(i.App_ReportDTCByStatusMask) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[9e]">App_ReportDTCSnapshotIdentification</a> from app_dcm.o(i.App_ReportDTCSnapshotIdentification) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[9d]">App_ReportDTCSnapshotRecordByDTCNumber</a> from app_dcm.o(i.App_ReportDTCSnapshotRecordByDTCNumber) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[9a]">App_ReportNumberOfDTCByStatusMask</a> from app_dcm.o(i.App_ReportNumberOfDTCByStatusMask) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[9c]">App_ReportSupportedDTC</a> from app_dcm.o(i.App_ReportSupportedDTC) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[9f]">App_Request_Seed_L1</a> from app_dcm.o(i.App_Request_Seed_L1) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[79]">App_ReturnControlToEcu0x3901</a> from app_dcm.o(i.App_ReturnControlToEcu0x3901) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[7b]">App_ReturnControlToEcu0x3902</a> from app_dcm.o(i.App_ReturnControlToEcu0x3902) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[7d]">App_ReturnControlToEcu0x3903</a> from app_dcm.o(i.App_ReturnControlToEcu0x3903) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[7f]">App_ReturnControlToEcu0x3904</a> from app_dcm.o(i.App_ReturnControlToEcu0x3904) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[81]">App_ReturnControlToEcu0x3905</a> from app_dcm.o(i.App_ReturnControlToEcu0x3905) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[a0]">App_Send_Key_L1</a> from app_dcm.o(i.App_Send_Key_L1) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[7a]">App_ShortTermAdjustment0x3901</a> from app_dcm.o(i.App_ShortTermAdjustment0x3901) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[7c]">App_ShortTermAdjustment0x3902</a> from app_dcm.o(i.App_ShortTermAdjustment0x3902) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[7e]">App_ShortTermAdjustment0x3903</a> from app_dcm.o(i.App_ShortTermAdjustment0x3903) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[80]">App_ShortTermAdjustment0x3904</a> from app_dcm.o(i.App_ShortTermAdjustment0x3904) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[82]">App_ShortTermAdjustment0x3905</a> from app_dcm.o(i.App_ShortTermAdjustment0x3905) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[83]">App_StartRoutine0x0203</a> from app_dcm.o(i.App_StartRoutine0x0203) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[78]">App_Write0xF190</a> from app_dcm.o(i.App_Write0xF190) referenced from dcm_lcfg.o(.constdata)
 <LI><a href="#[27]">BSTIM_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2e]">CAN_IRQHandler</a> from can.o(i.CAN_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[21]">CCL_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[28]">COMPx_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[5d]">COM_ReceiveSigBCM_1F0_FrontFogLightSts</a> from com_lcfg.o(i.COM_ReceiveSigBCM_1F0_FrontFogLightSts) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[59]">COM_ReceiveSigEHB_125_PATAResponse</a> from com_lcfg.o(i.COM_ReceiveSigEHB_125_PATAResponse) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[5b]">COM_ReceiveSigEHB_125_VehicleSpeed</a> from com_lcfg.o(i.COM_ReceiveSigEHB_125_VehicleSpeed) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[5a]">COM_ReceiveSigEHB_125_VehicleSpeedInvalid</a> from com_lcfg.o(i.COM_ReceiveSigEHB_125_VehicleSpeedInvalid) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[5c]">COM_ReceiveSigPMS_162_DriveModeInd</a> from com_lcfg.o(i.COM_ReceiveSigPMS_162_DriveModeInd) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[5e]">COM_ReceiveSigPMS_214_EpedalActive</a> from com_lcfg.o(i.COM_ReceiveSigPMS_214_EpedalActive) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[5f]">COM_ReceiveSigPMS_3C1_V2XDchaSwtFb1</a> from com_lcfg.o(i.COM_ReceiveSigPMS_3C1_V2XDchaSwtFb1) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[58]">COM_ReceiveSigPSM_A0_SlidingmomentrSetReq</a> from com_lcfg.o(i.COM_ReceiveSigPSM_A0_SlidingmomentrSetReq) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[46]">COM_SendSigCSM_ECO_Req</a> from com_lcfg.o(i.COM_SendSigCSM_ECO_Req) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[47]">COM_SendSigCSM_ECO_ReqInvalid</a> from com_lcfg.o(i.COM_SendSigCSM_ECO_ReqInvalid) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[4c]">COM_SendSigCSM_ESCOff_Req</a> from com_lcfg.o(i.COM_SendSigCSM_ESCOff_Req) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[4d]">COM_SendSigCSM_ESCOff_ReqInvalid</a> from com_lcfg.o(i.COM_SendSigCSM_ESCOff_ReqInvalid) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[50]">COM_SendSigCSM_EVMode_Req</a> from com_lcfg.o(i.COM_SendSigCSM_EVMode_Req) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[51]">COM_SendSigCSM_EVMode_ReqInvalid</a> from com_lcfg.o(i.COM_SendSigCSM_EVMode_ReqInvalid) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[48]">COM_SendSigCSM_EngRec_Req</a> from com_lcfg.o(i.COM_SendSigCSM_EngRec_Req) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[49]">COM_SendSigCSM_EngRec_ReqInvalid</a> from com_lcfg.o(i.COM_SendSigCSM_EngRec_ReqInvalid) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[52]">COM_SendSigCSM_REVMode_Req</a> from com_lcfg.o(i.COM_SendSigCSM_REVMode_Req) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[53]">COM_SendSigCSM_REVMode_ReqInvalid</a> from com_lcfg.o(i.COM_SendSigCSM_REVMode_ReqInvalid) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[4e]">COM_SendSigCSM_SW_FrontFogLight</a> from com_lcfg.o(i.COM_SendSigCSM_SW_FrontFogLight) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[4f]">COM_SendSigCSM_SW_FrontFogLightInvalid</a> from com_lcfg.o(i.COM_SendSigCSM_SW_FrontFogLightInvalid) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[4a]">COM_SendSigCSM_SinglePad_Req</a> from com_lcfg.o(i.COM_SendSigCSM_SinglePad_Req) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[4b]">COM_SendSigCSM_SinglePad_ReqInvalid</a> from com_lcfg.o(i.COM_SendSigCSM_SinglePad_ReqInvalid) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[56]">COM_SendSigCSM_SwitchSts_AliveCounter</a> from com_lcfg.o(i.COM_SendSigCSM_SwitchSts_AliveCounter) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[57]">COM_SendSigCSM_SwitchSts_CheckSum</a> from com_lcfg.o(i.COM_SendSigCSM_SwitchSts_CheckSum) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[54]">COM_SendSigCSM_V2XDchaSwt</a> from com_lcfg.o(i.COM_SendSigCSM_V2XDchaSwt) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[55]">COM_SendSigCSM_V2XDchaSwtInvalid</a> from com_lcfg.o(i.COM_SendSigCSM_V2XDchaSwtInvalid) referenced from com_lcfg.o(.constdata)
 <LI><a href="#[45]">CanNm_TxConfirmation</a> from oseknm.o(i.CanNm_TxConfirmation) referenced from canif_lcfg.o(.constdata)
 <LI><a href="#[43]">CanTp_RxIndication</a> from cantp.o(i.CanTp_RxIndication) referenced 2 times from canif_lcfg.o(.constdata)
 <LI><a href="#[42]">Com_RxIndication</a> from com.o(i.Com_RxIndication) referenced 6 times from canif_lcfg.o(.constdata)
 <LI><a href="#[44]">Com_TxConfirmation</a> from com.o(i.Com_TxConfirmation) referenced 2 times from canif_lcfg.o(.constdata)
 <LI><a href="#[16]">DAC_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[3a]">DeleteVoltage</a> from drv_system_voltage.o(i.DeleteVoltage) referenced from drv_system_voltage.o(.constdata)
 <LI><a href="#[38]">Disable</a> from drv_system_voltage.o(i.Disable) referenced from drv_system_voltage.o(.constdata)
 <LI><a href="#[31]">DrvButtonAttach</a> from drv_button.o(i.DrvButtonAttach) referenced from drv_button.o(.constdata)
 <LI><a href="#[32]">DrvButtonGetEvent</a> from drv_button.o(i.DrvButtonGetEvent) referenced from drv_button.o(.constdata)
 <LI><a href="#[34]">DrvCrc8</a> from drv_crc8.o(i.DrvCrc8) referenced from drv_crc8.o(.constdata)
 <LI><a href="#[35]">DrvCrc8LookTable</a> from drv_crc8.o(i.DrvCrc8LookTable) referenced from drv_crc8.o(.constdata)
 <LI><a href="#[86]">DspInternal_Uds_ClearDiagnosticInformation</a> from dcm.o(i.DspInternal_Uds_ClearDiagnosticInformation) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[8a]">DspInternal_Uds_CommunicationControl</a> from dcm.o(i.DspInternal_Uds_CommunicationControl) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[8f]">DspInternal_Uds_ControlDTCSetting</a> from dcm.o(i.DspInternal_Uds_ControlDTCSetting) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[84]">DspInternal_Uds_DiagnosticSessionControl</a> from dcm.o(i.DspInternal_Uds_DiagnosticSessionControl) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[85]">DspInternal_Uds_EcuReset</a> from dcm.o(i.DspInternal_Uds_EcuReset) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[8c]">DspInternal_Uds_InputOutputControlByIdentifier</a> from dcm.o(i.DspInternal_Uds_InputOutputControlByIdentifier) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[87]">DspInternal_Uds_ReadDTCInformation</a> from dcm.o(i.DspInternal_Uds_ReadDTCInformation) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[88]">DspInternal_Uds_ReadDataByIdentifier</a> from dcm.o(i.DspInternal_Uds_ReadDataByIdentifier) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[8d]">DspInternal_Uds_RoutineControl</a> from dcm.o(i.DspInternal_Uds_RoutineControl) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[89]">DspInternal_Uds_SecurityAccess</a> from dcm.o(i.DspInternal_Uds_SecurityAccess) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[8e]">DspInternal_Uds_TesterPresent</a> from dcm.o(i.DspInternal_Uds_TesterPresent) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[8b]">DspInternal_Uds_WriteDataByIdentifier</a> from dcm.o(i.DspInternal_Uds_WriteDataByIdentifier) referenced from dcm_cfg.o(.constdata)
 <LI><a href="#[37]">Enable</a> from drv_system_voltage.o(i.Enable) referenced from drv_system_voltage.o(.constdata)
 <LI><a href="#[14]">FDET_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2d]">GPIO_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[29]">GPTIM0_1_IRQHandler</a> from hal_time.o(i.GPTIM0_1_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2a]">GPTIM2_IRQHandler</a> from hal_time.o(i.GPTIM2_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[41]">GetAdcValue</a> from drv_adc.o(i.GetAdcValue) referenced from drv_adc.o(.constdata)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[20]">I2C_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[23]">LPTIM_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1f]">LPUARTx_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[26]">LUT_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[12]">RTC_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[7]">ReadAdc</a> from app_system_voltage.o(i.ReadAdc) referenced 2 times from app_system_voltage.o(.data)
 <LI><a href="#[5]">ReadKeyState</a> from app_button.o(i.ReadKeyState) referenced 12 times from app_button.o(.data)
 <LI><a href="#[3b]">ReadMode</a> from drv_system_voltage.o(i.ReadMode) referenced from drv_system_voltage.o(.constdata)
 <LI><a href="#[a]">Reset_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[3f]">Run</a> from drv_led.o(i.Run) referenced from drv_led.o(.constdata)
 <LI><a href="#[17]">SPI0_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[18]">SPI1_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[19]">SPI2_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[11]">SVD_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[3d]">SetCloseTickTime</a> from drv_led.o(i.SetCloseTickTime) referenced from drv_led.o(.constdata)
 <LI><a href="#[3e]">SetOpenTickTime</a> from drv_led.o(i.SetOpenTickTime) referenced from drv_led.o(.constdata)
 <LI><a href="#[3c]">SetState</a> from drv_led.o(i.SetState) referenced from drv_led.o(.constdata)
 <LI><a href="#[f]">SysTick_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2f]">SystemInit</a> from system_fm33lg0xx.o(i.SystemInit) referenced from startup_fm33lg0xx.o(.text)
 <LI><a href="#[33]">Traversal</a> from drv_button.o(i.Traversal) referenced 3 times from drv_button.o(.constdata)
 <LI><a href="#[1a]">UART0_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1b]">UART1_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1c]">UART3_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1d]">UART4_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1e]">UART5_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2c]">VREF_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[10]">WDT_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[25]">WKUPx_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[8]">WriteCs</a> from app_system_voltage.o(i.WriteCs) referenced 2 times from app_system_voltage.o(.data)
 <LI><a href="#[6]">WriteGpio</a> from app_led.o(i.WriteGpio) referenced 26 times from app_led.o(.data)
 <LI><a href="#[a7]">__main</a> from __main.o(!!!main) referenced from startup_fm33lg0xx.o(.text)
 <LI><a href="#[9]">read_adc_value</a> from app_adc.o(i.read_adc_value) referenced 4 times from app_adc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a7]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[aa]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ba]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1bb]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1bc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ae]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1d3]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1d4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1d5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1d6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1d7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1d8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1d9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[a9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1da]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ab]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ad]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1db]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[af]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; TickTime5MsTask &rArr; AppCanTask5ms &rArr; Dcm_MainFunction &rArr; DslInternal_Timer_CallbackTask &rArr; App_DefaultPost &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1dc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[bd]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b2]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1dd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b4]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ATIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BSTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CCL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>COMPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LPUARTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>LUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>VREF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>WKUPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b7]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[b6]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1de]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanGpioInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalPwmInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcDefaultSet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clockchange
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_MainFunctionTx
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_MainFunctionRx
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Traversal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SecurityAccessKeyCompared
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Kuwe_Session
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Extended_DiagnosticPost
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Extended_Diagnostic
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Default
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxConfirmation
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TransmitIpdu
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ManageCyclicIpdu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_InitTxIpdu
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_InitRxIpdu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxMainFunction
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxSFPdu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFFPdu
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFCPdu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxCFPdu
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_TxConfirmation
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_RxIndication
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Timer_CallbackTask
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SessionTransferPostProcessing
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxMainFunction
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFFPdu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxCFPdu
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmSetAlarm
</UL>

<P><STRONG><a name="[1e2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[b1]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1e5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1e7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>AddVoltage</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_system_voltage.o(i.AddVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddVoltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_system_voltage.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>AppAdcInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_adc.o(i.AppAdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AppAdcInit &rArr; HalAdcDefaultSet &rArr; HalAdcCommonInit &rArr; FL_ADC_CommonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcDefaultSet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>AppAdcTask</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_adc.o(i.AppAdcTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppAdcTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickTime5MsTask
</UL>

<P><STRONG><a name="[c1]"></a>AppButtonInit</STRONG> (Thumb, 926 bytes, Stack size 8 bytes, app_button.o(i.AppButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AppButtonInit &rArr; HalGpioSetMode &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>AppButtonTask</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, app_button.o(i.AppButtonTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppButtonTask
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickTime10MsTask
</UL>

<P><STRONG><a name="[c5]"></a>AppCanInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, app_can.o(i.AppCanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AppCanInit &rArr; CanNm_Init &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStart
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTrcv_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GotoMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetControllerMode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanGpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>AppCanTask5ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_can.o(i.AppCanTask5ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AppCanTask5ms &rArr; Dcm_MainFunction &rArr; DslInternal_Timer_CallbackTask &rArr; App_DefaultPost &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_MainFunction
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_MainFunctionTx
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_MainFunctionRx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_MainFunction
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_MainFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickTime5MsTask
</UL>

<P><STRONG><a name="[da]"></a>AppCrc8Calc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_crc8.o(i.AppCrc8Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AppCrc8Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIpduCSM_3CA_Conf
</UL>

<P><STRONG><a name="[f8]"></a>AppDemmNmLimphomeFaultEventSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, event.o(i.AppDemmNmLimphomeFaultEventSet))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanLimpHomeEnd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmLimpHomeState
</UL>

<P><STRONG><a name="[65]"></a>AppIpduBCM_1F0_Ind</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_com.o(i.AppIpduBCM_1F0_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AppIpduBCM_1F0_Ind &rArr; Com_ReceiveSignal &rArr; Com_GetRxIpduStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ReceiveSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>AppIpduCSM_3CA_Conf</STRONG> (Thumb, 646 bytes, Stack size 16 bytes, app_com.o(i.AppIpduCSM_3CA_Conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AppIpduCSM_3CA_Conf &rArr; Com_SendSignalExt
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCrc8Calc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SendSignalExt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>AppIpduCSM_3CA_TxTOIndication</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_com.o(i.AppIpduCSM_3CA_TxTOIndication))
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>AppIpduEHB_125_Ind</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_com.o(i.AppIpduEHB_125_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AppIpduEHB_125_Ind &rArr; Com_ReceiveSignal &rArr; Com_GetRxIpduStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ReceiveSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>AppIpduPMS_162_Ind</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_com.o(i.AppIpduPMS_162_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AppIpduPMS_162_Ind &rArr; Com_ReceiveSignal &rArr; Com_GetRxIpduStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ReceiveSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>AppIpduPMS_214_Ind</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_com.o(i.AppIpduPMS_214_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AppIpduPMS_214_Ind &rArr; Com_ReceiveSignal &rArr; Com_GetRxIpduStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ReceiveSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>AppIpduPMS_3C1_Ind</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_com.o(i.AppIpduPMS_3C1_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AppIpduPMS_3C1_Ind &rArr; Com_ReceiveSignal &rArr; Com_GetRxIpduStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ReceiveSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>AppIpduPSM_A0_Ind</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_com.o(i.AppIpduPSM_A0_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AppIpduPSM_A0_Ind &rArr; Com_ReceiveSignal &rArr; Com_GetRxIpduStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ReceiveSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>AppLedInit</STRONG> (Thumb, 602 bytes, Stack size 8 bytes, app_led.o(i.AppLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AppLedInit &rArr; HalGpioSetMode &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a1]"></a>AppLedTask</STRONG> (Thumb, 1000 bytes, Stack size 8 bytes, app_led.o(i.AppLedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppLedTask
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickTime10MsTask
</UL>

<P><STRONG><a name="[dc]"></a>AppPwmInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_pwm.o(i.AppPwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = AppPwmInit &rArr; HalPwmInit &rArr; FL_GPTIM_OC_Init &rArr; OCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalPwmSetCcr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalPwmInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>AppRxIpduBCM_1F0_TimeOutInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_com.o(i.AppRxIpduBCM_1F0_TimeOutInd))
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>AppRxIpduEHB_125_TimeOutInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_com.o(i.AppRxIpduEHB_125_TimeOutInd))
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>AppRxIpduPMS_162_TimeOutInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_com.o(i.AppRxIpduPMS_162_TimeOutInd))
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>AppRxIpduPMS_214_TimeOutInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_com.o(i.AppRxIpduPMS_214_TimeOutInd))
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>AppRxIpduPMS_3C1_TimeOutInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_com.o(i.AppRxIpduPMS_3C1_TimeOutInd))
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>AppRxIpduPSM_A0_TimeOutInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_com.o(i.AppRxIpduPSM_A0_TimeOutInd))
<BR>[Address Reference Count : 1]<UL><LI> com_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>AppSystemVoltageInit</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, app_system_voltage.o(i.AppSystemVoltageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AppSystemVoltageInit &rArr; HalGpioSetMode &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a2]"></a>AppSystemVoltageTask</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, app_system_voltage.o(i.AppSystemVoltageTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppSystemVoltageTask
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickTime10MsTask
</UL>

<P><STRONG><a name="[e0]"></a>App_ClearDiagnosticInformation</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app_dcm.o(i.App_ClearDiagnosticInformation), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_dtc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>

<P><STRONG><a name="[a6]"></a>App_DTCRecordOff</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_dcm.o(i.App_DTCRecordOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_DTCRecordOff &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_disable_dtc_setting
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>App_DTCRecordOn</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_dcm.o(i.App_DTCRecordOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_DTCRecordOn &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_enable_dtc_setting
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>App_Default</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, app_dcm.o(i.App_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_Default &rArr; DsdInternal_ProcessingDoneNoResponse &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDoneNoResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>App_DefaultPost</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, app_dcm.o(i.App_DefaultPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = App_DefaultPost &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Timer_CallbackTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>App_DisableRxAndEnableTx</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, app_dcm.o(i.App_DisableRxAndEnableTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = App_DisableRxAndEnableTx &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>App_DisableRxAndTx</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, app_dcm.o(i.App_DisableRxAndTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_DisableRxAndTx &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>App_EnableRxAndDisableTx</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, app_dcm.o(i.App_EnableRxAndDisableTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_EnableRxAndDisableTx &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>App_EnableRxAndTx</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, app_dcm.o(i.App_EnableRxAndTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = App_EnableRxAndTx &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>App_Extended_Diagnostic</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, app_dcm.o(i.App_Extended_Diagnostic))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_Extended_Diagnostic &rArr; DsdInternal_ProcessingDoneNoResponse &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDoneNoResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>App_Extended_DiagnosticPost</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, app_dcm.o(i.App_Extended_DiagnosticPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Extended_DiagnosticPost
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>App_HardReset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_dcm.o(i.App_HardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_HardReset &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>App_HardResetPost</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, app_dcm.o(i.App_HardResetPost))
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>App_Kuwe_Session</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, app_dcm.o(i.App_Kuwe_Session))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_Kuwe_Session &rArr; DsdInternal_ProcessingDoneNoResponse &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDoneNoResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>App_Kuwe_SessionPost</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, app_dcm.o(i.App_Kuwe_SessionPost))
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>App_Programming</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, app_dcm.o(i.App_Programming))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Programming &rArr; DsdInternal_ProcessingDoneNoResponse &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_RCRResponsePending
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDoneNoResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>App_ProgrammingPost</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_dcm.o(i.App_ProgrammingPost))
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>App_Read0x1540</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0x1540))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0x1540 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>App_Read0x1541</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0x1541))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0x1541 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>App_Read0xF183</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0xF183))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0xF183 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_copys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>App_Read0xF184</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0xF184))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0xF184 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_RamRead
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>App_Read0xF187</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0xF187))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0xF187 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_copys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>App_Read0xF18A</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0xF18A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0xF18A &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_copys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>App_Read0xF18E</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0xF18E))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0xF18E &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_copys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>App_Read0xF190</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0xF190))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0xF190 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_RamRead
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>App_Read0xF191</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0xF191))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0xF191 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_copys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>App_Read0xF195</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, app_dcm.o(i.App_Read0xF195))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Read0xF195 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_copys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>App_ReportDTCByStatusMask</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, app_dcm.o(i.App_ReportDTCByStatusMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_ReportDTCByStatusMask &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dem_get_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>App_ReportDTCSnapshotIdentification</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, app_dcm.o(i.App_ReportDTCSnapshotIdentification))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_ReportDTCSnapshotIdentification &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>App_ReportDTCSnapshotRecordByDTCNumber</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, app_dcm.o(i.App_ReportDTCSnapshotRecordByDTCNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = App_ReportDTCSnapshotRecordByDTCNumber &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_get_stored_index
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dem_get_state
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>App_ReportNumberOfDTCByStatusMask</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, app_dcm.o(i.App_ReportNumberOfDTCByStatusMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_ReportNumberOfDTCByStatusMask &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dem_get_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>App_ReportSupportedDTC</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, app_dcm.o(i.App_ReportSupportedDTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_ReportSupportedDTC &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dem_get_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>App_Request_Seed_L1</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, app_dcm.o(i.App_Request_Seed_L1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Request_Seed_L1 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>App_ReturnControlToEcu0x3901</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_dcm.o(i.App_ReturnControlToEcu0x3901))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_ReturnControlToEcu0x3901 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>App_ReturnControlToEcu0x3902</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_dcm.o(i.App_ReturnControlToEcu0x3902))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_ReturnControlToEcu0x3902 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>App_ReturnControlToEcu0x3903</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dcm.o(i.App_ReturnControlToEcu0x3903))
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>App_ReturnControlToEcu0x3904</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dcm.o(i.App_ReturnControlToEcu0x3904))
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>App_ReturnControlToEcu0x3905</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dcm.o(i.App_ReturnControlToEcu0x3905))
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>App_Send_Key_L1</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_dcm.o(i.App_Send_Key_L1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_Send_Key_L1 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SecurityAccessKeyCompared
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>App_ShortTermAdjustment0x3901</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dcm.o(i.App_ShortTermAdjustment0x3901))
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>App_ShortTermAdjustment0x3902</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_dcm.o(i.App_ShortTermAdjustment0x3902))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_ShortTermAdjustment0x3902 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>App_ShortTermAdjustment0x3903</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dcm.o(i.App_ShortTermAdjustment0x3903))
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>App_ShortTermAdjustment0x3904</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dcm.o(i.App_ShortTermAdjustment0x3904))
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>App_ShortTermAdjustment0x3905</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dcm.o(i.App_ShortTermAdjustment0x3905))
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>App_StartRoutine0x0203</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_dcm.o(i.App_StartRoutine0x0203))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_StartRoutine0x0203 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_RoutineStarted
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>App_Write0xF190</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, app_dcm.o(i.App_Write0xF190))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_Write0xF190 &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_RamWrite
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>ApplNmBusOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oseknm_app.o(i.ApplNmBusOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ApplNmBusOff
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStop
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmBusErrorRecover
</UL>

<P><STRONG><a name="[f6]"></a>ApplNmBusOffEnd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oseknm_app.o(i.ApplNmBusOffEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ApplNmBusOffEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
</UL>

<P><STRONG><a name="[11e]"></a>ApplNmBusOffRecoverySuccess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oseknm_app.o(i.ApplNmBusOffRecoverySuccess))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_TxConfirmation
</UL>

<P><STRONG><a name="[18e]"></a>ApplNmCanBusOffRecoveryFail</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oseknm_app.o(i.ApplNmCanBusOffRecoveryFail))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmBusErrorRecover
</UL>

<P><STRONG><a name="[f7]"></a>ApplNmCanLimpHomeEnd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oseknm_app.o(i.ApplNmCanLimpHomeEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ApplNmCanLimpHomeEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDemmNmLimphomeFaultEventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
</UL>

<P><STRONG><a name="[193]"></a>ApplNmCanLimpHomeStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oseknm_app.o(i.ApplNmCanLimpHomeStart))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
</UL>

<P><STRONG><a name="[f9]"></a>ApplNmCanSleep</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oseknm_app.o(i.ApplNmCanSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ApplNmCanSleep &rArr; CanIf_SetControllerMode &rArr; Can_SetControllerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetControllerMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStop
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTrcv_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTwbsTimeOutProc
</UL>

<P><STRONG><a name="[fb]"></a>ApplNmCanStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oseknm_app.o(i.ApplNmCanStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ApplNmCanStart
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
</UL>

<P><STRONG><a name="[fc]"></a>ApplNmLimpHomeState</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oseknm_app.o(i.ApplNmLimpHomeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ApplNmLimpHomeState
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDemmNmLimphomeFaultEventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
</UL>

<P><STRONG><a name="[11d]"></a>ApplNmShutDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oseknm_app.o(i.ApplNmShutDown))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Stop
</UL>

<P><STRONG><a name="[fd]"></a>ApplNmWaitBusSleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, oseknm_app.o(i.ApplNmWaitBusSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ApplNmWaitBusSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStop
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmReadyToBusSleep
</UL>

<P><STRONG><a name="[fe]"></a>ApplNmWaitBusSleepCancel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oseknm_app.o(i.ApplNmWaitBusSleepCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ApplNmWaitBusSleepCancel
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
</UL>

<P><STRONG><a name="[2e]"></a>CAN_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, can.o(i.CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN_IRQHandler &rArr; CAN_Controller_Tx_handler &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_ControllerBusOff
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SetControllerMode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Controller_Tx_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Controller_Rx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>COM_ReceiveSigBCM_1F0_FrontFogLightSts</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com_lcfg.o(i.COM_ReceiveSigBCM_1F0_FrontFogLightSts))
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>COM_ReceiveSigEHB_125_PATAResponse</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com_lcfg.o(i.COM_ReceiveSigEHB_125_PATAResponse))
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>COM_ReceiveSigEHB_125_VehicleSpeed</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, com_lcfg.o(i.COM_ReceiveSigEHB_125_VehicleSpeed))
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>COM_ReceiveSigEHB_125_VehicleSpeedInvalid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com_lcfg.o(i.COM_ReceiveSigEHB_125_VehicleSpeedInvalid))
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>COM_ReceiveSigPMS_162_DriveModeInd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com_lcfg.o(i.COM_ReceiveSigPMS_162_DriveModeInd))
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>COM_ReceiveSigPMS_214_EpedalActive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com_lcfg.o(i.COM_ReceiveSigPMS_214_EpedalActive))
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>COM_ReceiveSigPMS_3C1_V2XDchaSwtFb1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com_lcfg.o(i.COM_ReceiveSigPMS_3C1_V2XDchaSwtFb1))
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>COM_ReceiveSigPSM_A0_SlidingmomentrSetReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, com_lcfg.o(i.COM_ReceiveSigPSM_A0_SlidingmomentrSetReq))
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>COM_SendSigCSM_ECO_Req</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_ECO_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_ECO_Req &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>COM_SendSigCSM_ECO_ReqInvalid</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_ECO_ReqInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_ECO_ReqInvalid &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>COM_SendSigCSM_ESCOff_Req</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_ESCOff_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_ESCOff_Req &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>COM_SendSigCSM_ESCOff_ReqInvalid</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_ESCOff_ReqInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_ESCOff_ReqInvalid &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>COM_SendSigCSM_EVMode_Req</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_EVMode_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_EVMode_Req &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>COM_SendSigCSM_EVMode_ReqInvalid</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_EVMode_ReqInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_EVMode_ReqInvalid &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>COM_SendSigCSM_EngRec_Req</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_EngRec_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_EngRec_Req &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>COM_SendSigCSM_EngRec_ReqInvalid</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_EngRec_ReqInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_EngRec_ReqInvalid &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>COM_SendSigCSM_REVMode_Req</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_REVMode_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_REVMode_Req &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>COM_SendSigCSM_REVMode_ReqInvalid</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_REVMode_ReqInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_REVMode_ReqInvalid &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>COM_SendSigCSM_SW_FrontFogLight</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_SW_FrontFogLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_SW_FrontFogLight &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>COM_SendSigCSM_SW_FrontFogLightInvalid</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_SW_FrontFogLightInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_SW_FrontFogLightInvalid &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>COM_SendSigCSM_SinglePad_Req</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_SinglePad_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_SinglePad_Req &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>COM_SendSigCSM_SinglePad_ReqInvalid</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_SinglePad_ReqInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_SinglePad_ReqInvalid &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>COM_SendSigCSM_SwitchSts_AliveCounter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_SwitchSts_AliveCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_SwitchSts_AliveCounter &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>COM_SendSigCSM_SwitchSts_CheckSum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_SwitchSts_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_SwitchSts_CheckSum &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>COM_SendSigCSM_V2XDchaSwt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_V2XDchaSwt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_V2XDchaSwt &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>COM_SendSigCSM_V2XDchaSwtInvalid</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com_lcfg.o(i.COM_SendSigCSM_V2XDchaSwtInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = COM_SendSigCSM_V2XDchaSwtInvalid &rArr; Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>CanIf_ClearTransmitBuffer</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, canif.o(i.CanIf_ClearTransmitBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetControllerMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetPduMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCanBusOffCheckFun
</UL>

<P><STRONG><a name="[104]"></a>CanIf_ControllerBusOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canif.o(i.CanIf_ControllerBusOff))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>CanIf_ControllerModeIndication</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, canif.o(i.CanIf_ControllerModeIndication))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SetControllerMode
</UL>

<P><STRONG><a name="[c8]"></a>CanIf_Init</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, canif.o(i.CanIf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanIf_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[100]"></a>CanIf_RxIndication</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, canif.o(i.CanIf_RxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CanIf_RxIndication
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dem_ReportErrorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Controller_Rx_handler
</UL>

<P><STRONG><a name="[c9]"></a>CanIf_SetControllerMode</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, canif.o(i.CanIf_SetControllerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanIf_SetControllerMode &rArr; Can_SetControllerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_ClearTransmitBuffer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SetControllerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanSleep
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
</UL>

<P><STRONG><a name="[109]"></a>CanIf_SetPduMode</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, canif.o(i.CanIf_SetPduMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanIf_SetPduMode
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_ClearTransmitBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmReadyToBusSleep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCanBusOffCheckFun
</UL>

<P><STRONG><a name="[10a]"></a>CanIf_Transmit</STRONG> (Thumb, 504 bytes, Stack size 56 bytes, canif.o(i.CanIf_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dem_ReportErrorStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_MemCpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_TxConfirmation
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TransmitIpdu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxMainFunction
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_AssembleFC
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtxTimeOutProc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTmaxTimeOutProc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
</UL>

<P><STRONG><a name="[102]"></a>CanIf_TxConfirmation</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, canif.o(i.CanIf_TxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Controller_Tx_handler
</UL>

<P><STRONG><a name="[d1]"></a>CanNm_GotoMode</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, oseknm.o(i.CanNm_GotoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanNm_GotoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[d0]"></a>CanNm_Init</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, oseknm.o(i.CanNm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CanNm_Init &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Talk
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[d5]"></a>CanNm_MainFunction</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, oseknm.o(i.CanNm_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CanNm_MainFunction &rArr; NmTimerTBusOffCntFun &rArr; NmTBusOffRecoveryTimeOutProc &rArr; NmTerrTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTWBSCntFun
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTTypCntFun
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTTxCntFun
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTMaxCntFun
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTErrCntFun
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTBusOffCntFun
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmModeCheckFun
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCanBusOffCheckFun
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanTask5ms
</UL>

<P><STRONG><a name="[e8]"></a>CanNm_Start</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, oseknm.o(i.CanNm_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_EnableRxAndTx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DisableRxAndEnableTx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DefaultPost
</UL>

<P><STRONG><a name="[eb]"></a>CanNm_Stop</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, oseknm.o(i.CanNm_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanNm_Stop &rArr; CanNm_SetNxtState
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmShutDown
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmResetConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCancelAlarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_EnableRxAndDisableTx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DisableRxAndTx
</UL>

<P><STRONG><a name="[10e]"></a>CanNm_Talk</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, oseknm.o(i.CanNm_Talk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanNm_Talk
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Init
</UL>

<P><STRONG><a name="[45]"></a>CanNm_TxConfirmation</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, oseknm.o(i.CanNm_TxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CanNm_TxConfirmation &rArr; NmTxConfirmation &rArr; NmReadyToBusSleep &rArr; NmSetAlarm &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmBusOffRecoverySuccess
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxConfirmation
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canif_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>CanTp_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cantp.o(i.CanTp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanTp_Init &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[d7]"></a>CanTp_MainFunction</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cantp.o(i.CanTp_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CanTp_MainFunction &rArr; CanTp_RxMainFunction &rArr; CanTp_AssembleFC &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxMainFunction
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanTask5ms
</UL>

<P><STRONG><a name="[43]"></a>CanTp_RxIndication</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, cantp.o(i.CanTp_RxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CanTp_RxIndication &rArr; CanTp_RxFFPdu &rArr; PduR_CanTpCopyRxData &rArr; Dcm_CopyRxData &rArr; DiagCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxSFPdu
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFFPdu
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFCPdu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxCFPdu
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DataCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canif_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>CanTp_Transmit</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, cantp.o(i.CanTp_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_SetFormatOffset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_DcmTransmit
</UL>

<P><STRONG><a name="[fa]"></a>CanTrcv_Disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cantrcv.o(i.CanTrcv_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanTrcv_Disable &rArr; HalGpioSetPin
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanSleep
</UL>

<P><STRONG><a name="[c6]"></a>CanTrcv_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cantrcv.o(i.CanTrcv_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CanTrcv_Init &rArr; HalGpioSetMode &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetPin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[c7]"></a>Can_Init</STRONG> (Thumb, 636 bytes, Stack size 16 bytes, can.o(i.Can_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Can_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[135]"></a>Can_InitController</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, can.o(i.Can_InitController))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Can_InitController
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_BusoffRecovery
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
</UL>

<P><STRONG><a name="[103]"></a>Can_SetControllerMode</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, can.o(i.Can_SetControllerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Can_SetControllerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_ControllerModeIndication
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_MemSet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Controller_Transmit_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetControllerMode
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>Can_Write</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, can.o(i.Can_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Can_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_TxConfirmation
</UL>

<P><STRONG><a name="[139]"></a>Clockchange</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, main.o(i.Clockchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Clockchange &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>Com_DisactiveSig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, com.o(i.Com_DisactiveSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Com_DisactiveSig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_InitTxIpdu
</UL>

<P><STRONG><a name="[143]"></a>Com_GetRxIpduStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, com.o(i.Com_GetRxIpduStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Com_GetRxIpduStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_MainFunctionRx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ReceiveSignal
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxIndication
</UL>

<P><STRONG><a name="[144]"></a>Com_GetTxIpduStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, com.o(i.Com_GetTxIpduStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Com_GetTxIpduStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_MainFunctionTx
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxConfirmation
</UL>

<P><STRONG><a name="[ca]"></a>Com_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, com.o(i.Com_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Com_Init &rArr; Com_TxInit &rArr; Com_InitTxIpdu &rArr; Com_DisactiveTxIpdu
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[d3]"></a>Com_MainFunctionRx</STRONG> (Thumb, 618 bytes, Stack size 16 bytes, com.o(i.Com_MainFunctionRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Com_MainFunctionRx &rArr; Com_GetRxIpduStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_GetRxIpduStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanTask5ms
</UL>

<P><STRONG><a name="[d4]"></a>Com_MainFunctionTx</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, com.o(i.Com_MainFunctionTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Com_MainFunctionTx &rArr; Com_TransmitIpdu &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TransmitIpdu
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ManageCyclicIpdu
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_GetTxIpduStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanTask5ms
</UL>

<P><STRONG><a name="[d8]"></a>Com_ReceiveSignal</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, com.o(i.Com_ReceiveSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Com_ReceiveSignal &rArr; Com_GetRxIpduStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_GetRxIpduStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIpduPSM_A0_Ind
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIpduPMS_3C1_Ind
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIpduPMS_214_Ind
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIpduPMS_162_Ind
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIpduEHB_125_Ind
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIpduBCM_1F0_Ind
</UL>

<P><STRONG><a name="[42]"></a>Com_RxIndication</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, com.o(i.Com_RxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Com_RxIndication &rArr; Com_CopyRxPDU
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxIpduCallout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_CopyRxPDU
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_GetRxIpduStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canif_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>Com_RxIpduCallout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_com.o(i.Com_RxIpduCallout))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxIndication
</UL>

<P><STRONG><a name="[cc]"></a>Com_RxStart</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, com.o(i.Com_RxStart))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmBusOffEnd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_EnableRxAndTx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_EnableRxAndDisableTx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DefaultPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanStart
</UL>

<P><STRONG><a name="[e9]"></a>Com_RxStop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, com.o(i.Com_RxStop))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmBusOff
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DisableRxAndTx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DisableRxAndEnableTx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanSleep
</UL>

<P><STRONG><a name="[d9]"></a>Com_SendSignalExt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, com.o(i.Com_SendSignalExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Com_SendSignalExt
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIpduCSM_3CA_Conf
</UL>

<P><STRONG><a name="[105]"></a>Com_SetSendRequest</STRONG> (Thumb, 956 bytes, Stack size 24 bytes, com.o(i.Com_SetSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Com_SetSendRequest &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxIpduIsActived
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SigIsActived
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_DisactiveTxIpdu
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ActiveTxIpdu
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TriggerIPDUSend
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_GetTxIpduStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_V2XDchaSwtInvalid
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_V2XDchaSwt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_SwitchSts_CheckSum
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_SwitchSts_AliveCounter
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_SinglePad_ReqInvalid
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_SinglePad_Req
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_SW_FrontFogLightInvalid
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_SW_FrontFogLight
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_REVMode_ReqInvalid
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_REVMode_Req
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_EngRec_ReqInvalid
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_EngRec_Req
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_EVMode_ReqInvalid
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_EVMode_Req
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_ESCOff_ReqInvalid
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_ESCOff_Req
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_ECO_ReqInvalid
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendSigCSM_ECO_Req
</UL>

<P><STRONG><a name="[13e]"></a>Com_StopRxIpdu</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com.o(i.Com_StopRxIpdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Com_StopRxIpdu
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_InitRxIpdu
</UL>

<P><STRONG><a name="[142]"></a>Com_StopTxIpdu</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com.o(i.Com_StopTxIpdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Com_StopTxIpdu
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_InitTxIpdu
</UL>

<P><STRONG><a name="[14c]"></a>Com_TriggerIPDUSend</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, com.o(i.Com_TriggerIPDUSend))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>

<P><STRONG><a name="[44]"></a>Com_TxConfirmation</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, com.o(i.Com_TxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Com_TxConfirmation &rArr; Com_GetTxIpduStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_GetTxIpduStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canif_lcfg.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>Com_TxIpduCallout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_com.o(i.Com_TxIpduCallout))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TransmitIpdu
</UL>

<P><STRONG><a name="[cb]"></a>Com_TxStart</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, com.o(i.Com_TxStart))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmBusOffEnd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_EnableRxAndTx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DisableRxAndEnableTx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DefaultPost
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmWaitBusSleepCancel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanStart
</UL>

<P><STRONG><a name="[ea]"></a>Com_TxStop</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, com.o(i.Com_TxStop))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmBusOff
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_EnableRxAndDisableTx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DisableRxAndTx
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmWaitBusSleep
</UL>

<P><STRONG><a name="[14e]"></a>Dcm_CopyRxData</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, dcm_cbk.o(i.Dcm_CopyRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dcm_CopyRxData &rArr; DiagCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpCopyRxData
</UL>

<P><STRONG><a name="[150]"></a>Dcm_CopyTxData</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, dcm_cbk.o(i.Dcm_CopyTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dcm_CopyTxData &rArr; DiagCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpCopyTxData
</UL>

<P><STRONG><a name="[ce]"></a>Dcm_Init</STRONG> (Thumb, 752 bytes, Stack size 16 bytes, dcm.o(i.Dcm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dcm_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsd_InteralInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[d6]"></a>Dcm_MainFunction</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dcm.o(i.Dcm_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Dcm_MainFunction &rArr; DslInternal_Timer_CallbackTask &rArr; App_DefaultPost &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Timer_CallbackTask
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_UdsSidDispatcher
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_UdsRepeatServiceCall
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_UdsPostServiceProcessing
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_RepeatTransmitCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanTask5ms
</UL>

<P><STRONG><a name="[157]"></a>Dcm_RxIndication</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, dcm_cbk.o(i.Dcm_RxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dcm_RxIndication
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsd_GetSessionMapId
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpRxIndication
</UL>

<P><STRONG><a name="[19c]"></a>Dcm_StartOfReception</STRONG> (Thumb, 346 bytes, Stack size 12 bytes, dcm_cbk.o(i.Dcm_StartOfReception))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dcm_StartOfReception
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpStartOfReception
</UL>

<P><STRONG><a name="[159]"></a>Dcm_TxConfirmation</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, dcm_cbk.o(i.Dcm_TxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dcm_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsd_InteralInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsd_GetSessionMapId
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpTxConfirmation
</UL>

<P><STRONG><a name="[3a]"></a>DeleteVoltage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_system_voltage.o(i.DeleteVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeleteVoltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_system_voltage.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>Dem_ReportErrorStatus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dem.o(i.Dem_ReportErrorStatus))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_RxIndication
</UL>

<P><STRONG><a name="[31]"></a>DrvButtonAttach</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_button.o(i.DrvButtonAttach))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvButtonAttach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_button.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>DrvButtonGetEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_button.o(i.DrvButtonGetEvent))
<BR>[Address Reference Count : 1]<UL><LI> drv_button.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>DrvCrc8</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, drv_crc8.o(i.DrvCrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DrvCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crc8.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>DrvCrc8LookTable</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, drv_crc8.o(i.DrvCrc8LookTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DrvCrc8LookTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crc8.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>DsdInternal_ProcessingDone</STRONG> (Thumb, 818 bytes, Stack size 24 bytes, dcm.o(i.DsdInternal_ProcessingDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_DcmTransmit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsd_InteralInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDoneNoResponse
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write0xF190
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartRoutine0x0203
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ShortTermAdjustment0x3902
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Key_L1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReturnControlToEcu0x3902
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReturnControlToEcu0x3901
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Request_Seed_L1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportSupportedDTC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportNumberOfDTCByStatusMask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportDTCSnapshotRecordByDTCNumber
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportDTCSnapshotIdentification
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportDTCByStatusMask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF195
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF191
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF190
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF18E
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF18A
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF187
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF184
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF183
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0x1541
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0x1540
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Kuwe_Session
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HardReset
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Extended_Diagnostic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_EnableRxAndTx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_EnableRxAndDisableTx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DisableRxAndTx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DisableRxAndEnableTx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Default
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DTCRecordOn
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DTCRecordOff
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClearDiagnosticInformation
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Timer_CallbackTask
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_UdsSidDispatcher
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_TesterPresent
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_SecurityAccess
</UL>

<P><STRONG><a name="[e7]"></a>DsdInternal_ProcessingDoneNoResponse</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dcm.o(i.DsdInternal_ProcessingDoneNoResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DsdInternal_ProcessingDoneNoResponse &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Programming
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Kuwe_Session
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Extended_Diagnostic
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Default
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_UdsSidDispatcher
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_DidDispatcher
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_RoutineControl
</UL>

<P><STRONG><a name="[f3]"></a>DsdInternal_RoutineStarted</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, dcm.o(i.DsdInternal_RoutineStarted))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartRoutine0x0203
</UL>

<P><STRONG><a name="[f2]"></a>DsdInternal_SecurityAccessKeyCompared</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, dcm.o(i.DsdInternal_SecurityAccessKeyCompared))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DsdInternal_SecurityAccessKeyCompared
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_AccessAttemptNumberDec
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Key_L1
</UL>

<P><STRONG><a name="[e2]"></a>DsdInternal_SetNegResponse</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, dcm.o(i.DsdInternal_SetNegResponse))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartRoutine0x0203
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Key_L1
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportDTCSnapshotRecordByDTCNumber
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClearDiagnosticInformation
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Timer_CallbackTask
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_UdsSidDispatcher
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_DidDispatcher
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_10_11_85
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_WriteDataByIdentifier
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_TesterPresent
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_SecurityAccess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_RoutineControl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_ReadDataByIdentifier
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_ReadDTCInformation
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_InputOutputControlByIdentifier
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_CommunicationControl
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_ClearDiagnosticInformation
</UL>

<P><STRONG><a name="[158]"></a>Dsd_GetSessionMapId</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, dcm.o(i.Dsd_GetSessionMapId))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_TxConfirmation
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_RxIndication
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Timer_CallbackTask
</UL>

<P><STRONG><a name="[151]"></a>Dsd_InteralInit</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, dcm.o(i.Dsd_InteralInit))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_TxConfirmation
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_RepeatTransmitCheck
</UL>

<P><STRONG><a name="[ec]"></a>DslInternal_RCRResponsePending</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, dcm.o(i.DslInternal_RCRResponsePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DslInternal_RCRResponsePending &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_DcmTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Programming
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Timer_CallbackTask
</UL>

<P><STRONG><a name="[86]"></a>DspInternal_Uds_ClearDiagnosticInformation</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, dcm.o(i.DspInternal_Uds_ClearDiagnosticInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DspInternal_Uds_ClearDiagnosticInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>DspInternal_Uds_CommunicationControl</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dcm.o(i.DspInternal_Uds_CommunicationControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DspInternal_Uds_CommunicationControl &rArr; DsdInternal_Uds_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_Uds_Common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>DspInternal_Uds_ControlDTCSetting</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dcm.o(i.DspInternal_Uds_ControlDTCSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DspInternal_Uds_ControlDTCSetting &rArr; DsdInternal_10_11_85 &rArr; DsdInternal_Uds_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_10_11_85
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>DspInternal_Uds_DiagnosticSessionControl</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dcm.o(i.DspInternal_Uds_DiagnosticSessionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DspInternal_Uds_DiagnosticSessionControl &rArr; DsdInternal_10_11_85 &rArr; DsdInternal_Uds_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_10_11_85
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>DspInternal_Uds_EcuReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dcm.o(i.DspInternal_Uds_EcuReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DspInternal_Uds_EcuReset &rArr; DsdInternal_10_11_85 &rArr; DsdInternal_Uds_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_10_11_85
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>DspInternal_Uds_InputOutputControlByIdentifier</STRONG> (Thumb, 38 bytes, Stack size 28 bytes, dcm.o(i.DspInternal_Uds_InputOutputControlByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DspInternal_Uds_InputOutputControlByIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>DspInternal_Uds_ReadDTCInformation</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, dcm.o(i.DspInternal_Uds_ReadDTCInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DspInternal_Uds_ReadDTCInformation &rArr; DsdInternal_Uds_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_Uds_Common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>DspInternal_Uds_ReadDataByIdentifier</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dcm.o(i.DspInternal_Uds_ReadDataByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DspInternal_Uds_ReadDataByIdentifier &rArr; DsdInternal_DidDispatcher &rArr; DsdInternal_ProcessingDoneNoResponse &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_DidDispatcher
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>DspInternal_Uds_RoutineControl</STRONG> (Thumb, 2752 bytes, Stack size 32 bytes, dcm.o(i.DspInternal_Uds_RoutineControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DspInternal_Uds_RoutineControl &rArr; DsdInternal_ProcessingDoneNoResponse &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDoneNoResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>DspInternal_Uds_SecurityAccess</STRONG> (Thumb, 1054 bytes, Stack size 16 bytes, dcm.o(i.DspInternal_Uds_SecurityAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DspInternal_Uds_SecurityAccess &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_AccessAttemptNumberDec
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_GetSecurityLevelMap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>DspInternal_Uds_TesterPresent</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dcm.o(i.DspInternal_Uds_TesterPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DspInternal_Uds_TesterPresent &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>DspInternal_Uds_WriteDataByIdentifier</STRONG> (Thumb, 736 bytes, Stack size 32 bytes, dcm.o(i.DspInternal_Uds_WriteDataByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DspInternal_Uds_WriteDataByIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcm_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>Eeprom_RamRead</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, eeprom_cfg.o(i.Eeprom_RamRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Eeprom_RamRead
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF190
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF184
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_status_read
</UL>

<P><STRONG><a name="[f4]"></a>Eeprom_RamWrite</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, eeprom_cfg.o(i.Eeprom_RamWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Eeprom_RamWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Write0xF190
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_dtc_record_storay
</UL>

<P><STRONG><a name="[163]"></a>FL_ADC_CommonInit</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, fm33lg0xx_fl_adc.o(i.FL_ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_ADC_CommonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcCommonInit
</UL>

<P><STRONG><a name="[165]"></a>FL_ADC_Init</STRONG> (Thumb, 608 bytes, Stack size 24 bytes, fm33lg0xx_fl_adc.o(i.FL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableOverSampling
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcDefaultSet
</UL>

<P><STRONG><a name="[177]"></a>FL_DelayInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fm33lg0xx_fl.o(i.FL_DelayInit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>

<P><STRONG><a name="[13a]"></a>FL_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33lg0xx_fl.o(i.FL_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_DelayMs &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clockchange
</UL>

<P><STRONG><a name="[168]"></a>FL_DelayUs</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fm33lg0xx_fl.o(i.FL_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample
</UL>

<P><STRONG><a name="[c4]"></a>FL_GPIO_Init</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinRemap
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinPullup
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinOpenDrain
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinInput
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinAnalogSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanGpioInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalPwmInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetMode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clockchange
</UL>

<P><STRONG><a name="[186]"></a>FL_GPIO_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetMode
</UL>

<P><STRONG><a name="[16f]"></a>FL_GPTIM_Init</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_GPTIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_SetCounterAlignedMode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_GenerateUpdateEvent
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup4BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalPwmInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimeInit
</UL>

<P><STRONG><a name="[173]"></a>FL_GPTIM_OC_Init</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FL_GPTIM_OC_Init &rArr; OCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_GenerateUpdateEvent
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_CC_SetChannelMode
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalPwmInit
</UL>

<P><STRONG><a name="[176]"></a>FL_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fm33lg0xx_fl.o(i.FL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>FL_NVIC_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fm33lg0xx_fl.o(i.FL_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimeInit
</UL>

<P><STRONG><a name="[29]"></a>GPTIM0_1_IRQHandler</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, hal_time.o(i.GPTIM0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPTIM0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_IsEnabledIT_Update
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_IsActiveFlag_Update
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_ClearFlag_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPTIM2_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, hal_time.o(i.GPTIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPTIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_IsEnabledIT_Update
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_IsActiveFlag_Update
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_ClearFlag_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>HalAdcCommonInit</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, hal_adc.o(i.HalAdcCommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HalAdcCommonInit &rArr; FL_ADC_CommonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcDefaultSet
</UL>

<P><STRONG><a name="[c0]"></a>HalAdcDefaultSet</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, hal_adc.o(i.HalAdcDefaultSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HalAdcDefaultSet &rArr; HalAdcCommonInit &rArr; FL_ADC_CommonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcCommonInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAdcInit
</UL>

<P><STRONG><a name="[180]"></a>HalAdcReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hal_adc.o(i.HalAdcReadValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HalAdcReadValue &rArr; GetSingleChannelSample &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnChannel
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_value
</UL>

<P><STRONG><a name="[182]"></a>HalGpioReadPin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_gpio.o(i.HalGpioReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HalGpioReadPin &rArr; PortGetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnPin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortGetInputTBspGpioPortxEnum
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyState
</UL>

<P><STRONG><a name="[bf]"></a>HalGpioSetMode</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, hal_gpio.o(i.HalGpioSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HalGpioSetMode &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_StructInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnPin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortGetInputTBspGpioPortxEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTrcv_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAdcInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSystemVoltageInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppLedInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppButtonInit
</UL>

<P><STRONG><a name="[133]"></a>HalGpioSetPin</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hal_gpio.o(i.HalGpioSetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HalGpioSetPin
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnPin
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortToggleBit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortSetBit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortGetInputTBspGpioPortxEnum
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTrcv_Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCs
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGpio
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTrcv_Disable
</UL>

<P><STRONG><a name="[dd]"></a>HalPwmInit</STRONG> (Thumb, 908 bytes, Stack size 88 bytes, hal_pwm.o(i.HalPwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HalPwmInit &rArr; FL_GPTIM_OC_Init &rArr; OCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_OC_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Enable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPwmInit
</UL>

<P><STRONG><a name="[de]"></a>HalPwmSetCcr</STRONG> (Thumb, 490 bytes, Stack size 8 bytes, hal_pwm.o(i.HalPwmSetCcr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HalPwmSetCcr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPwmInit
</UL>

<P><STRONG><a name="[1a6]"></a>HalTickCount</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_tick.o(i.HalTickCount), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Callback
</UL>

<P><STRONG><a name="[1b8]"></a>HalTickGetTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tick.o(i.HalTickGetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>HalTimeInit</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, hal_time.o(i.HalTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HalTimeInit &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_ClearFlag_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>PduR_CanTpCopyRxData</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pdur.o(i.PduR_CanTpCopyRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PduR_CanTpCopyRxData &rArr; Dcm_CopyRxData &rArr; DiagCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_CopyRxData
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxSFPdu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFFPdu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxCFPdu
</UL>

<P><STRONG><a name="[132]"></a>PduR_CanTpCopyTxData</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pdur.o(i.PduR_CanTpCopyTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PduR_CanTpCopyTxData &rArr; Dcm_CopyTxData &rArr; DiagCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_CopyTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxMainFunction
</UL>

<P><STRONG><a name="[127]"></a>PduR_CanTpRxIndication</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pdur.o(i.PduR_CanTpRxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PduR_CanTpRxIndication &rArr; Dcm_RxIndication
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_RxIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxSFPdu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFFPdu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxCFPdu
</UL>

<P><STRONG><a name="[12e]"></a>PduR_CanTpStartOfReception</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pdur.o(i.PduR_CanTpStartOfReception))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PduR_CanTpStartOfReception &rArr; Dcm_StartOfReception
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_StartOfReception
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxSFPdu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFFPdu
</UL>

<P><STRONG><a name="[12c]"></a>PduR_CanTpTxConfirmation</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pdur.o(i.PduR_CanTpTxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PduR_CanTpTxConfirmation &rArr; Dcm_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_TxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxMainFunction
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFCPdu
</UL>

<P><STRONG><a name="[15d]"></a>PduR_DcmTransmit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pdur.o(i.PduR_DcmTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_RCRResponsePending
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_RepeatTransmitCheck
</UL>

<P><STRONG><a name="[7]"></a>ReadAdc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_system_voltage.o(i.ReadAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadAdc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_system_voltage.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ReadKeyState</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, app_button.o(i.ReadKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadKeyState &rArr; HalGpioReadPin &rArr; PortGetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>ReadMode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_system_voltage.o(i.ReadMode))
<BR>[Address Reference Count : 1]<UL><LI> drv_system_voltage.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>Run</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, drv_led.o(i.Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_led.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>SetCloseTickTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_led.o(i.SetCloseTickTime))
<BR>[Address Reference Count : 1]<UL><LI> drv_led.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>SetOpenTickTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_led.o(i.SetOpenTickTime))
<BR>[Address Reference Count : 1]<UL><LI> drv_led.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>SetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_led.o(i.SetState))
<BR>[Address Reference Count : 1]<UL><LI> drv_led.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 614 bytes, Stack size 8 bytes, system_fm33lg0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate &rArr; SystemPLLClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f]"></a>SystemInit</STRONG> (Thumb, 476 bytes, Stack size 8 bytes, system_fm33lg0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; SystemPLLClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>TickTime10MsTask</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.TickTime10MsTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TickTime10MsTask &rArr; AppSystemVoltageTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSystemVoltageTask
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppLedTask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppButtonTask
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>TickTime1MsTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.TickTime1MsTask))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>TickTime5MsTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.TickTime5MsTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TickTime5MsTask &rArr; AppCanTask5ms &rArr; Dcm_MainFunction &rArr; DslInternal_Timer_CallbackTask &rArr; App_DefaultPost &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanTask5ms
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAdcTask
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>Time0Callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.Time0Callback), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTickCount
</UL>

<P><STRONG><a name="[8]"></a>WriteCs</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_system_voltage.o(i.WriteCs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteCs &rArr; HalGpioSetPin
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_system_voltage.o(.data)
</UL>
<P><STRONG><a name="[ef]"></a>_dem_get_state</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, demm.o(i._dem_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportSupportedDTC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportNumberOfDTCByStatusMask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportDTCSnapshotRecordByDTCNumber
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportDTCByStatusMask
</UL>

<P><STRONG><a name="[e1]"></a>dem_clear_dtc</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, demm.o(i.dem_clear_dtc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_get_dtc_handle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_all_test_result
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dem_clear_dtc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_test_result
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClearDiagnosticInformation
</UL>

<P><STRONG><a name="[1b1]"></a>dem_clear_test_result</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, demm.o(i.dem_clear_test_result), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_dtc
</UL>

<P><STRONG><a name="[e4]"></a>dem_disable_dtc_setting</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, demm.o(i.dem_disable_dtc_setting))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DTCRecordOff
</UL>

<P><STRONG><a name="[e5]"></a>dem_enable_dtc_setting</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, demm.o(i.dem_enable_dtc_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dem_enable_dtc_setting &rArr; dem_clear_all_test_result
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_all_test_result
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DTCRecordOn
</UL>

<P><STRONG><a name="[f0]"></a>dem_get_stored_index</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, demm.o(i.dem_get_stored_index))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReportDTCSnapshotRecordByDTCNumber
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_status_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_dtc_record_storay
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dem_clear_dtc
</UL>

<P><STRONG><a name="[b0]"></a>main</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; TickTime5MsTask &rArr; AppCanTask5ms &rArr; Dcm_MainFunction &rArr; DslInternal_Timer_CallbackTask &rArr; App_DefaultPost &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppPwmInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAdcInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSystemVoltageInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppLedInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppButtonInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimeInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTickGetTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickTime5MsTask
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickTime1MsTask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickTime10MsTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clockchange
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ed]"></a>memory_copys</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, memory.o(i.memory_copys))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memory_copys
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF195
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF191
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF18E
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF18A
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF187
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Read0xF183
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_sets
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6]"></a>WriteGpio</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, app_led.o(i.WriteGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteGpio &rArr; HalGpioSetPin
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_led.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>read_adc_value</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_adc.o(i.read_adc_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_adc_value &rArr; HalAdcReadValue &rArr; GetSingleChannelSample &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcReadValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_adc.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>AppCanGpioInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, app_can.o(i.AppCanGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AppCanGpioInit &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[cf]"></a>NVIC_SetPriority</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, app_can.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCanInit
</UL>

<P><STRONG><a name="[1a7]"></a>ButtonHandler</STRONG> (Thumb, 744 bytes, Stack size 16 bytes, drv_button.o(i.ButtonHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ButtonHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Traversal
</UL>

<P><STRONG><a name="[33]"></a>Traversal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_button.o(i.Traversal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Traversal &rArr; ButtonHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_button.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>Disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_system_voltage.o(i.Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_system_voltage.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>Enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_system_voltage.o(i.Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_system_voltage.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>SystemVoltageTraversal</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, drv_system_voltage.o(i.SystemVoltageTraversal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemVoltageTraversal
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Traversal
</UL>

<P><STRONG><a name="[36]"></a>Traversal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_system_voltage.o(i.Traversal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Traversal &rArr; SystemVoltageTraversal
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemVoltageTraversal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_system_voltage.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>GetAdcValue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_adc.o(i.GetAdcValue))
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>Traversal</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_adc.o(i.Traversal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Traversal
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>PortClrBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_gpio.o(i.PortClrBit))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetPin
</UL>

<P><STRONG><a name="[185]"></a>PortGetBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_gpio.o(i.PortGetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PortGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioReadPin
</UL>

<P><STRONG><a name="[183]"></a>PortGetInputTBspGpioPortxEnum</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hal_gpio.o(i.PortGetInputTBspGpioPortxEnum))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetPin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetMode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioReadPin
</UL>

<P><STRONG><a name="[188]"></a>PortSetBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_gpio.o(i.PortSetBit))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetPin
</UL>

<P><STRONG><a name="[189]"></a>PortToggleBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_gpio.o(i.PortToggleBit))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetPin
</UL>

<P><STRONG><a name="[184]"></a>ReturnPin</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, hal_gpio.o(i.ReturnPin))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetPin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioSetMode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGpioReadPin
</UL>

<P><STRONG><a name="[17e]"></a>GetSingleChannelSample</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, hal_adc.o(i.GetSingleChannelSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetSingleChannelSample &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcReadValue
</UL>

<P><STRONG><a name="[181]"></a>ReturnChannel</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, hal_adc.o(i.ReturnChannel))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcReadValue
</UL>

<P><STRONG><a name="[17c]"></a>FL_GPTIM_ClearFlag_Update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_time.o(i.FL_GPTIM_ClearFlag_Update))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimeInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM0_1_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>FL_GPTIM_IsActiveFlag_Update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_time.o(i.FL_GPTIM_IsActiveFlag_Update))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM0_1_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>FL_GPTIM_IsEnabledIT_Update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_time.o(i.FL_GPTIM_IsEnabledIT_Update))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM0_1_IRQHandler
</UL>

<P><STRONG><a name="[18a]"></a>FL_GPTIM_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_pwm.o(i.FL_GPTIM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalPwmInit
</UL>

<P><STRONG><a name="[19e]"></a>SystemPLLClockUpdate</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, system_fm33lg0xx.o(i.SystemPLLClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemPLLClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[179]"></a>NVIC_SetPriority</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, fm33lg0xx_fl.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>

<P><STRONG><a name="[166]"></a>FL_ADC_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_adc.o(i.FL_ADC_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[167]"></a>FL_ADC_DisableOverSampling</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_adc.o(i.FL_ADC_DisableOverSampling))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[164]"></a>FL_ADC_SetClockSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_adc.o(i.FL_ADC_SetClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>

<P><STRONG><a name="[16c]"></a>FL_GPIO_DisablePinAnalogSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinAnalogSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[169]"></a>FL_GPIO_DisablePinInput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinInput))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[16b]"></a>FL_GPIO_DisablePinOpenDrain</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinOpenDrain))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[16a]"></a>FL_GPIO_DisablePinPullup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinPullup))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[16d]"></a>FL_GPIO_DisablePinRemap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinRemap))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[16e]"></a>FL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[170]"></a>FL_CMU_EnableGroup4BusClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33lg0xx_fl_gptim.o(i.FL_CMU_EnableGroup4BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Init
</UL>

<P><STRONG><a name="[174]"></a>FL_GPTIM_CC_SetChannelMode</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_CC_SetChannelMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPTIM_CC_SetChannelMode
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_OC_Init
</UL>

<P><STRONG><a name="[172]"></a>FL_GPTIM_GenerateUpdateEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_GenerateUpdateEvent))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_OC_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Init
</UL>

<P><STRONG><a name="[171]"></a>FL_GPTIM_SetCounterAlignedMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_SetCounterAlignedMode))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Init
</UL>

<P><STRONG><a name="[175]"></a>OCConfig</STRONG> (Thumb, 416 bytes, Stack size 20 bytes, fm33lg0xx_fl_gptim.o(i.OCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OCConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_OC_Init
</UL>

<P><STRONG><a name="[17d]"></a>GenerateKeyEx</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, app_dcm.o(i.GenerateKeyEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GenerateKeyEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[f1]"></a>GetKey</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_dcm.o(i.GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetKey &rArr; GenerateKeyEx
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateKeyEx
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Key_L1
</UL>

<P><STRONG><a name="[ff]"></a>CAN_Controller_Rx_handler</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, can.o(i.CAN_Controller_Rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CAN_Controller_Rx_handler &rArr; CanIf_RxIndication
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_RxIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>CAN_Controller_Tx_handler</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, can.o(i.CAN_Controller_Tx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CAN_Controller_Tx_handler &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_TxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>Can_BusoffRecovery</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can.o(i.Can_BusoffRecovery))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_InitController
</UL>

<P><STRONG><a name="[138]"></a>Can_Controller_Transmit_Abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can.o(i.Can_Controller_Transmit_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SetControllerMode
</UL>

<P><STRONG><a name="[134]"></a>Can_MemSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can.o(i.Can_MemSet))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_SetControllerMode
</UL>

<P><STRONG><a name="[10c]"></a>CanIf_MemCpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, canif.o(i.CanIf_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanIf_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
</UL>

<P><STRONG><a name="[106]"></a>CanIf_MemSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, canif.o(i.CanIf_MemSet))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Init
</UL>

<P><STRONG><a name="[1ad]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, demm.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_all_test_result
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_test_result
</UL>

<P><STRONG><a name="[1af]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, demm.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_all_test_result
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_test_result
</UL>

<P><STRONG><a name="[1a9]"></a>_dem_clear_dtc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, demm.o(i._dem_clear_dtc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_get_stored_index
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_clear
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_dtc_record_storay
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_dtc
</UL>

<P><STRONG><a name="[1ac]"></a>dem_clear_all_test_result</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, demm.o(i.dem_clear_all_test_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dem_clear_all_test_result
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_mem_clear
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_enable_dtc_setting
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_dtc
</UL>

<P><STRONG><a name="[1ab]"></a>dem_dtc_record_storay</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, demm.o(i.dem_dtc_record_storay), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_RamWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_get_stored_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dem_clear_dtc
</UL>

<P><STRONG><a name="[1b2]"></a>dem_get_dtc_handle</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, demm.o(i.dem_get_dtc_handle), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_dtc
</UL>

<P><STRONG><a name="[1b0]"></a>dem_init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, demm.o(i.dem_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_RamWrite
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_status_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_status_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_index_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_clear
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_dtc
</UL>

<P><STRONG><a name="[1ae]"></a>dem_mem_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, demm.o(i.dem_mem_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_status_read
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_clear_all_test_result
</UL>

<P><STRONG><a name="[1b6]"></a>dem_mem_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, demm.o(i.dem_mem_set), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_status_read
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_clear
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_init
</UL>

<P><STRONG><a name="[1aa]"></a>dem_stored_dtc_clear</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, demm.o(i.dem_stored_dtc_clear), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dem_clear_dtc
</UL>

<P><STRONG><a name="[1b3]"></a>dem_stored_dtc_index_init</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, demm.o(i.dem_stored_dtc_index_init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_init
</UL>

<P><STRONG><a name="[1b7]"></a>dem_stored_dtc_sets</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, demm.o(i.dem_stored_dtc_sets), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_copys
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_status_read
</UL>

<P><STRONG><a name="[1b5]"></a>dem_stored_dtc_status_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, demm.o(i.dem_stored_dtc_status_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_get_stored_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_init
</UL>

<P><STRONG><a name="[1b4]"></a>dem_stored_dtc_status_read</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, demm.o(i.dem_stored_dtc_status_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_RamRead
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_stored_dtc_sets
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_mem_set
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_mem_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dem_init
</UL>

<P><STRONG><a name="[120]"></a>CanTp_AssembleFC</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, cantp.o(i.CanTp_AssembleFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CanTp_AssembleFC &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
</UL>

<P><STRONG><a name="[121]"></a>CanTp_ChannelInit</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, cantp.o(i.CanTp_ChannelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Transmit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxMainFunction
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxSFPdu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFFPdu
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFCPdu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxCFPdu
</UL>

<P><STRONG><a name="[129]"></a>CanTp_DataCopy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cantp.o(i.CanTp_DataCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanTp_DataCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxIndication
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxSFPdu
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxFFPdu
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxCFPdu
</UL>

<P><STRONG><a name="[126]"></a>CanTp_RxCFPdu</STRONG> (Thumb, 2236 bytes, Stack size 48 bytes, cantp.o(i.CanTp_RxCFPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CanTp_RxCFPdu &rArr; PduR_CanTpCopyRxData &rArr; Dcm_CopyRxData &rArr; DiagCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpRxIndication
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpCopyRxData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DataCopy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxIndication
</UL>

<P><STRONG><a name="[12b]"></a>CanTp_RxFCPdu</STRONG> (Thumb, 624 bytes, Stack size 24 bytes, cantp.o(i.CanTp_RxFCPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CanTp_RxFCPdu &rArr; PduR_CanTpTxConfirmation &rArr; Dcm_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpTxConfirmation
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxIndication
</UL>

<P><STRONG><a name="[12d]"></a>CanTp_RxFFPdu</STRONG> (Thumb, 1358 bytes, Stack size 48 bytes, cantp.o(i.CanTp_RxFFPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CanTp_RxFFPdu &rArr; PduR_CanTpCopyRxData &rArr; Dcm_CopyRxData &rArr; DiagCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpStartOfReception
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpRxIndication
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpCopyRxData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DataCopy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxIndication
</UL>

<P><STRONG><a name="[124]"></a>CanTp_RxMainFunction</STRONG> (Thumb, 3756 bytes, Stack size 24 bytes, cantp.o(i.CanTp_RxMainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CanTp_RxMainFunction &rArr; CanTp_AssembleFC &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpStartOfReception
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpRxIndication
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpCopyRxData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_AssembleFC
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_MainFunction
</UL>

<P><STRONG><a name="[12f]"></a>CanTp_RxSFPdu</STRONG> (Thumb, 978 bytes, Stack size 40 bytes, cantp.o(i.CanTp_RxSFPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CanTp_RxSFPdu &rArr; PduR_CanTpCopyRxData &rArr; Dcm_CopyRxData &rArr; DiagCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpStartOfReception
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpRxIndication
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpCopyRxData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DataCopy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxIndication
</UL>

<P><STRONG><a name="[131]"></a>CanTp_SetFormatOffset</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, cantp.o(i.CanTp_SetFormatOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanTp_SetFormatOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Transmit
</UL>

<P><STRONG><a name="[125]"></a>CanTp_TxMainFunction</STRONG> (Thumb, 2868 bytes, Stack size 32 bytes, cantp.o(i.CanTp_TxMainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CanTp_TxMainFunction &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpTxConfirmation
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_CanTpCopyTxData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_MainFunction
</UL>

<P><STRONG><a name="[122]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cantp.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxIndication
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Transmit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxMainFunction
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
</UL>

<P><STRONG><a name="[123]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cantp.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxIndication
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Transmit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxMainFunction
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_RxMainFunction
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_ChannelInit
</UL>

<P><STRONG><a name="[14b]"></a>Com_ActiveTxIpdu</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com.o(i.Com_ActiveTxIpdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Com_ActiveTxIpdu
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>

<P><STRONG><a name="[148]"></a>Com_CopyRxPDU</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, com.o(i.Com_CopyRxPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Com_CopyRxPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxIndication
</UL>

<P><STRONG><a name="[140]"></a>Com_DisactiveTxIpdu</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com.o(i.Com_DisactiveTxIpdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Com_DisactiveTxIpdu
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_InitTxIpdu
</UL>

<P><STRONG><a name="[13d]"></a>Com_InitRxIpdu</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, com.o(i.Com_InitRxIpdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Com_InitRxIpdu &rArr; Com_StopRxIpdu
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_StopRxIpdu
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_RxInit
</UL>

<P><STRONG><a name="[13f]"></a>Com_InitTxIpdu</STRONG> (Thumb, 604 bytes, Stack size 16 bytes, com.o(i.Com_InitTxIpdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Com_InitTxIpdu &rArr; Com_DisactiveTxIpdu
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_DisactiveTxIpdu
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_StopTxIpdu
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_DisactiveSig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxInit
</UL>

<P><STRONG><a name="[145]"></a>Com_ManageCyclicIpdu</STRONG> (Thumb, 734 bytes, Stack size 8 bytes, com.o(i.Com_ManageCyclicIpdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Com_ManageCyclicIpdu &rArr; Com_TxIpduIsActived
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxIpduIsActived
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_MainFunctionTx
</UL>

<P><STRONG><a name="[13b]"></a>Com_RxInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, com.o(i.Com_RxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Com_RxInit &rArr; Com_InitRxIpdu &rArr; Com_StopRxIpdu
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_InitRxIpdu
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Init
</UL>

<P><STRONG><a name="[14a]"></a>Com_SigIsActived</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, com.o(i.Com_SigIsActived))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Com_SigIsActived
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
</UL>

<P><STRONG><a name="[146]"></a>Com_TransmitIpdu</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, com.o(i.Com_TransmitIpdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Com_TransmitIpdu &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_TxIpduCallout
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_MainFunctionTx
</UL>

<P><STRONG><a name="[13c]"></a>Com_TxInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, com.o(i.Com_TxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Com_TxInit &rArr; Com_InitTxIpdu &rArr; Com_DisactiveTxIpdu
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_InitTxIpdu
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Init
</UL>

<P><STRONG><a name="[147]"></a>Com_TxIpduIsActived</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, com.o(i.Com_TxIpduIsActived))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Com_TxIpduIsActived
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_SetSendRequest
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ManageCyclicIpdu
</UL>

<P><STRONG><a name="[162]"></a>Dcm_GetSecurityLevelMap</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, dcm.o(i.Dcm_GetSecurityLevelMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dcm_GetSecurityLevelMap
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_SecurityAccess
</UL>

<P><STRONG><a name="[161]"></a>Dcm_ResetToDefaultSession</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dcm.o(i.Dcm_ResetToDefaultSession))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Timer_CallbackTask
</UL>

<P><STRONG><a name="[15a]"></a>DsdInternal_10_11_85</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dcm.o(i.DsdInternal_10_11_85))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DsdInternal_10_11_85 &rArr; DsdInternal_Uds_Common
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_Uds_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_EcuReset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_DiagnosticSessionControl
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_ControlDTCSetting
</UL>

<P><STRONG><a name="[15e]"></a>DsdInternal_AccessAttemptNumberDec</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, dcm.o(i.DsdInternal_AccessAttemptNumberDec))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SecurityAccessKeyCompared
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_SecurityAccess
</UL>

<P><STRONG><a name="[15c]"></a>DsdInternal_DidDispatcher</STRONG> (Thumb, 996 bytes, Stack size 40 bytes, dcm.o(i.DsdInternal_DidDispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DsdInternal_DidDispatcher &rArr; DsdInternal_ProcessingDoneNoResponse &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDoneNoResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_ReadDataByIdentifier
</UL>

<P><STRONG><a name="[156]"></a>DsdInternal_RepeatTransmitCheck</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, dcm.o(i.DsdInternal_RepeatTransmitCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DsdInternal_RepeatTransmitCheck &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduR_DcmTransmit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsd_InteralInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_MainFunction
</UL>

<P><STRONG><a name="[15f]"></a>DsdInternal_SessionTransferPostProcessing</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, dcm.o(i.DsdInternal_SessionTransferPostProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DsdInternal_SessionTransferPostProcessing
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_Timer_CallbackTask
</UL>

<P><STRONG><a name="[152]"></a>DsdInternal_UdsPostServiceProcessing</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dcm.o(i.DsdInternal_UdsPostServiceProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DsdInternal_UdsPostServiceProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_MainFunction
</UL>

<P><STRONG><a name="[153]"></a>DsdInternal_UdsRepeatServiceCall</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, dcm.o(i.DsdInternal_UdsRepeatServiceCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DsdInternal_UdsRepeatServiceCall
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_MainFunction
</UL>

<P><STRONG><a name="[155]"></a>DsdInternal_UdsSidDispatcher</STRONG> (Thumb, 1306 bytes, Stack size 40 bytes, dcm.o(i.DsdInternal_UdsSidDispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DsdInternal_UdsSidDispatcher &rArr; DsdInternal_ProcessingDoneNoResponse &rArr; DsdInternal_ProcessingDone &rArr; PduR_DcmTransmit &rArr; CanTp_Transmit &rArr; CanTp_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDoneNoResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindUdsSid
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_MainFunction
</UL>

<P><STRONG><a name="[15b]"></a>DsdInternal_Uds_Common</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, dcm.o(i.DsdInternal_Uds_Common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DsdInternal_Uds_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_10_11_85
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_ReadDTCInformation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInternal_Uds_CommunicationControl
</UL>

<P><STRONG><a name="[154]"></a>DslInternal_Timer_CallbackTask</STRONG> (Thumb, 904 bytes, Stack size 16 bytes, dcm.o(i.DslInternal_Timer_CallbackTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DslInternal_Timer_CallbackTask &rArr; App_DefaultPost &rArr; CanNm_Start &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DslInternal_RCRResponsePending
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SetNegResponse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_ProcessingDone
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DefaultPost
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsd_GetSessionMapId
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_SessionTransferPostProcessing
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_ResetToDefaultSession
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_MainFunction
</UL>

<P><STRONG><a name="[160]"></a>FindUdsSid</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dcm.o(i.FindUdsSid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindUdsSid
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DsdInternal_UdsSidDispatcher
</UL>

<P><STRONG><a name="[14f]"></a>DiagCopy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcm_cbk.o(i.DiagCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiagCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_CopyTxData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_CopyRxData
</UL>

<P><STRONG><a name="[119]"></a>CanNm_GetCurState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, oseknm.o(i.CanNm_GetCurState))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_TxConfirmation
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxConfirmation
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTwbsTimeOutProc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtxTimeOutProc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTmaxTimeOutProc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmReadyToBusSleep
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeSleep
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
</UL>

<P><STRONG><a name="[118]"></a>CanNm_SetNxtState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oseknm.o(i.CanNm_SetNxtState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanNm_SetNxtState
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxConfirmation
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTwbsTimeOutProc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTmaxTimeOutProc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeSleep
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmBusErrorRecover
</UL>

<P><STRONG><a name="[18c]"></a>NmBusErrorRecover</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, oseknm.o(i.NmBusErrorRecover))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NmBusErrorRecover &rArr; NmSetAlarm &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanBusOffRecoveryFail
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmBusOff
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmSetAlarm
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmResetConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCancelAlarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCanBusOffCheckFun
</UL>

<P><STRONG><a name="[111]"></a>NmCanBusOffCheckFun</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, oseknm.o(i.NmCanBusOffCheckFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NmCanBusOffCheckFun &rArr; NmBusErrorRecover &rArr; NmSetAlarm &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetPduMode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_ClearTransmitBuffer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmBusErrorRecover
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_MainFunction
</UL>

<P><STRONG><a name="[11b]"></a>NmCancelAlarm</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, oseknm.o(i.NmCancelAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NmCancelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxConfirmation
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmReadyToBusSleep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmBusErrorRecover
</UL>

<P><STRONG><a name="[18f]"></a>NmGotoModeAwake</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, oseknm.o(i.NmGotoModeAwake))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NmGotoModeAwake &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetPduMode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmWaitBusSleepCancel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmSetAlarm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCancelAlarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmModeCheckFun
</UL>

<P><STRONG><a name="[190]"></a>NmGotoModeSleep</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oseknm.o(i.NmGotoModeSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NmGotoModeSleep &rArr; CanNm_SetNxtState
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmModeCheckFun
</UL>

<P><STRONG><a name="[11a]"></a>NmInitReset</STRONG> (Thumb, 760 bytes, Stack size 16 bytes, oseknm.o(i.NmInitReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NmInitReset &rArr; CanIf_SetControllerMode &rArr; Can_SetControllerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetControllerMode
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanLimpHomeStart
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanLimpHomeEnd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetPduMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanStart
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxPDUCreat
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmSetConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmSetAlarm
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmResetConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCancelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTmaxTimeOutProc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
</UL>

<P><STRONG><a name="[110]"></a>NmModeCheckFun</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, oseknm.o(i.NmModeCheckFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NmModeCheckFun &rArr; NmGotoModeAwake &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeSleep
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_MainFunction
</UL>

<P><STRONG><a name="[194]"></a>NmReadyToBusSleep</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, oseknm.o(i.NmReadyToBusSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NmReadyToBusSleep &rArr; NmSetAlarm &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetPduMode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmWaitBusSleep
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmSetAlarm
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmResetConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCancelAlarm
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxConfirmation
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTmaxTimeOutProc
</UL>

<P><STRONG><a name="[11c]"></a>NmResetConfig</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, oseknm.o(i.NmResetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NmResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Stop
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmReadyToBusSleep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmBusErrorRecover
</UL>

<P><STRONG><a name="[18d]"></a>NmSetAlarm</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, oseknm.o(i.NmSetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NmSetAlarm &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxConfirmation
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmReadyToBusSleep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmBusErrorRecover
</UL>

<P><STRONG><a name="[191]"></a>NmSetConfig</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, oseknm.o(i.NmSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NmSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
</UL>

<P><STRONG><a name="[195]"></a>NmTBusOffRecoveryTimeOutProc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oseknm.o(i.NmTBusOffRecoveryTimeOutProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = NmTBusOffRecoveryTimeOutProc &rArr; NmTerrTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTBusOffCntFun
</UL>

<P><STRONG><a name="[196]"></a>NmTerrTimeOutProc</STRONG> (Thumb, 946 bytes, Stack size 24 bytes, oseknm.o(i.NmTerrTimeOutProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NmTerrTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetControllerMode
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmBusOffEnd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_SetPduMode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_ClearTransmitBuffer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_InitController
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmLimpHomeState
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxPDUCreat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmSetAlarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTErrCntFun
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTBusOffRecoveryTimeOutProc
</UL>

<P><STRONG><a name="[117]"></a>NmTimerTBusOffCntFun</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, oseknm.o(i.NmTimerTBusOffCntFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NmTimerTBusOffCntFun &rArr; NmTBusOffRecoveryTimeOutProc &rArr; NmTerrTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTBusOffRecoveryTimeOutProc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_MainFunction
</UL>

<P><STRONG><a name="[114]"></a>NmTimerTErrCntFun</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, oseknm.o(i.NmTimerTErrCntFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NmTimerTErrCntFun &rArr; NmTerrTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_MainFunction
</UL>

<P><STRONG><a name="[113]"></a>NmTimerTMaxCntFun</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, oseknm.o(i.NmTimerTMaxCntFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NmTimerTMaxCntFun &rArr; NmTmaxTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTmaxTimeOutProc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_MainFunction
</UL>

<P><STRONG><a name="[116]"></a>NmTimerTTxCntFun</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, oseknm.o(i.NmTimerTTxCntFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NmTimerTTxCntFun &rArr; NmTtxTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtxTimeOutProc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_MainFunction
</UL>

<P><STRONG><a name="[112]"></a>NmTimerTTypCntFun</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, oseknm.o(i.NmTimerTTypCntFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NmTimerTTypCntFun &rArr; NmTtypTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_MainFunction
</UL>

<P><STRONG><a name="[115]"></a>NmTimerTWBSCntFun</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, oseknm.o(i.NmTimerTWBSCntFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NmTimerTWBSCntFun &rArr; NmTwbsTimeOutProc &rArr; ApplNmCanSleep &rArr; CanIf_SetControllerMode &rArr; Can_SetControllerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTwbsTimeOutProc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_MainFunction
</UL>

<P><STRONG><a name="[197]"></a>NmTmaxTimeOutProc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, oseknm.o(i.NmTmaxTimeOutProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NmTmaxTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmReadyToBusSleep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTMaxCntFun
</UL>

<P><STRONG><a name="[198]"></a>NmTtxTimeOutProc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, oseknm.o(i.NmTtxTimeOutProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = NmTtxTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxPDUCreat
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTTxCntFun
</UL>

<P><STRONG><a name="[199]"></a>NmTtypTimeOutProc</STRONG> (Thumb, 824 bytes, Stack size 24 bytes, oseknm.o(i.NmTtypTimeOutProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NmTtypTimeOutProc &rArr; CanIf_Transmit &rArr; CanIf_TxConfirmation &rArr; Can_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanLimpHomeStart
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Transmit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxPDUCreat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmSetAlarm
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCancelAlarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTTypCntFun
</UL>

<P><STRONG><a name="[19a]"></a>NmTwbsTimeOutProc</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, oseknm.o(i.NmTwbsTimeOutProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NmTwbsTimeOutProc &rArr; ApplNmCanSleep &rArr; CanIf_SetControllerMode &rArr; Can_SetControllerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplNmCanSleep
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTWBSCntFun
</UL>

<P><STRONG><a name="[11f]"></a>NmTxConfirmation</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, oseknm.o(i.NmTxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NmTxConfirmation &rArr; NmReadyToBusSleep &rArr; NmSetAlarm &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmSetAlarm
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmReadyToBusSleep
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCancelAlarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_GetCurState
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_TxConfirmation
</UL>

<P><STRONG><a name="[19b]"></a>NmTxPDUCopy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, oseknm.o(i.NmTxPDUCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NmTxPDUCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxPDUCreat
</UL>

<P><STRONG><a name="[192]"></a>NmTxPDUCreat</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oseknm.o(i.NmTxPDUCreat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NmTxPDUCreat &rArr; NmTxPDUCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxPDUCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtxTimeOutProc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmInitReset
</UL>

<P><STRONG><a name="[10d]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oseknm.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Talk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxPDUCopy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTwbsTimeOutProc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTmaxTimeOutProc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTWBSCntFun
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTTypCntFun
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTMaxCntFun
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTErrCntFun
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTBusOffCntFun
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmModeCheckFun
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCanBusOffCheckFun
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
</UL>

<P><STRONG><a name="[10f]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oseknm.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Start
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_Talk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTxPDUCopy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTwbsTimeOutProc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTtypTimeOutProc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTmaxTimeOutProc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTWBSCntFun
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTTypCntFun
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTMaxCntFun
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTErrCntFun
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTimerTBusOffCntFun
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmTerrTimeOutProc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmModeCheckFun
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmGotoModeAwake
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmCanBusOffCheckFun
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm_SetNxtState
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[bc]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
